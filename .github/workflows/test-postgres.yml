name: PostgreSQL & CI Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
# ──────────────────────────────── FRONTEND ──────────────────────────────── #
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Launch tests
        run: npm test --if-present

# ──────────────────────────────── BACKEND ───────────────────────────────── #
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: mydb_test
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: 3.10

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest psycopg2-binary

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5433/mydb_test
        run: pytest tests/ --verbose --cov=app/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

# ───────────────────────────── INTEGRATION ─────────────────────────────── #
  integration-test:
    runs-on: ubuntu-latest
    needs: [ backend-test, frontend-test ]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: mydb_test
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      POSTGRES_PASSWORD: test_password  # accessible pour toutes les étapes

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # (Exemple) Migration de base ou seed avant les tests
      - name: Run database migrations (Alembic / Django / etc.)
        working-directory: backend
        run: |
          echo "Run your migrations here"

      - name: Build required components
        run: docker compose -f docker-compose.test.yml up -d
        env:
          DOCKER_NETWORK:  job.services.postgres.network 

      - name: Run k6 integration tests
        working-directory: k6
        run: |
          wget -q https://github.com/grafana/k6/releases/download/v0.49.0/k6-v0.49.0-linux-amd64.tar.gz
          tar -xzf k6-v0.49.0-linux-amd64.tar.gz
          chmod +x k6-v0.49.0-linux-amd64/k6
          ./k6-v0.49.0-linux-amd64/k6 run script.js

      - name: Tear down containers
        if: always()
        run: docker compose -f docker-compose.test.yml down

# ────────────────────────────── BUILD & PUSH ───────────────────────────── #
  build-image:
    runs-on: ubuntu-latest
    needs: [ integration-test ]
    if:  github.event_name == 'push' && github.ref_name == 'main' 

    strategy:
      matrix:
        component: [ frontend, backend ]

    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "secrets.GITHUB_TOKEN" | docker login ghcr.io -u github.actor --password-stdin

      - name: Build & push matrix.component image
        uses: docker/build-push-action@v5
        with:
          context:  matrix.component 
          file: matrix.component/Dockerfile
          push: true
          tags: ghcr.io/github.repository_owner/spm-matrix.component:github.sha
